mod new_test is 
    protecting CONSTR .
    ops T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 T17 T18 T19 : -> VarType .
    ops T?0 T?1 T?2 T?3 T?4 T?5 T?6 T?7 T?8 T?9 T?10 T?11 T?12 T?13 T?14 T?15 T?16 T?17 T?18 T?19 : -> BoundVarType .
    ops c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 c36 c37 c38 c39 c40 c41 c42 c43 c44 c45 c46 c47 c48 c49 c50 c51 c52 c53 c54 c55 c56 c57 c58 c59 c60 c61 c62 c63 c64 c65 c66 c67 c68 c69 c70 c71 c72 c73 c74 c75 : -> Disj .

    eq c1 = (T1 <= int + float) /\ (T1 <= str + complex) .
    eq c2 = (T1 <= int) /\ (T1 <= str) .
    eq c21 = (T1 <= int + float) /\ (T1 <= dict < top, top > + bytes + str + int + float + frozenset < top > + bytearray + tuple < top > + list < top > + memoryview + range + set < top >) .
    eq c38 = (T1 <= list < int + str >) /\ (T1 <= list < str + complex >) .
    eq c39 = (T1 <= list < int + str >) /\ (T1 <= list < str + complex >) /\ (T2 <= int + float) /\ (T2 <= float + str) .
    eq c42 = (T1 <= list < int > + int) /\ (T1 <= list < int + float + T1 > + int + float) .
    eq c44 = (T1 <= list < list < int > + float > + int) /\ (T1 <= list < list < int + float + T1 > > + int + float) .
    eq c45 = (T6 <= int) /\ (T7 <= float) /\ (T1 <= float) /\ (T2 <= str) /\ (T3 <= int) /\ (T4 <= T6 + T1) /\ (T5 <= T7 + T2) .
    eq c46 = (T1 <= T4) /\ (T4 <= list < T3 >) .
    eq c47 = (T1 <= T?0) /\ (T1 <= int) .
    eq c48 = (T1 <= T?0) .
    eq c49 = (T1 <= top) /\ (T1 <= int) .
    eq c50 = (T1 <= T?0) /\ (T1 <= int) /\ (T2 <= T?0) /\ (T2 <= float) .
    eq c51 = (T1 <= T?0) /\ (T2 <= int) .
    eq c52 = (T2 <= bot) /\ (T2 <= top) /\ (T1 <= T?0) .
    eq c53 = (T2 <= top) .
    eq c54 = (T2 <= top) /\ (T2 <= int + float) .
    eq c55 = (T1 <= T?0) /\ (T1 <= dict < top, top > + bytes + str + int + float + frozenset < top > + bytearray + tuple < top > + list < top > + memoryview + range + set < top >) .
    eq c56 = (T1 <= T?0 + float) /\ (T1 <= int + float) .
    eq c57 = (T1 <= T?1) /\ (T2 <= T?1) /\ (T4 <= T?2) /\ (T1 <= float + int) /\ (T4 <= str) /\ (T2 <= float + int) /\ (T3 <= T?2) /\ (T3 <= float) .
    eq c58 = (T4 <= list < T?0 >) /\ (T3 <= T?0) /\ (T4 <= list < T3 >) .
    eq c59 = (T4 <= list < T?0 >) /\ (T4 <= list < T3 >) .
    eq c60 = (T3 <= T?0) /\ (T2 <= int) .
    eq c61 = (T4 <= frozenset < T3 > + list < T3 > + tuple < T3 > + set < T3 >) /\ (T4 <= list < T?0 >) /\ (T5 <= T?1) /\ (T5 <= int) /\ (T3 <= T?0) .
    eq c62 = (T1 <= list < T3 >) /\ (T1 <= T4) /\ (T4 <= list < T3 >) .
    eq c63 = (T5 <= T?1) /\ (T5 <= int) .
    eq c64 = (T4 <= list < T3 >) /\ (T4 <= list < T?0 >) .
    eq c65 = (T6 <= int) /\ (T4 <= T6 + T1) .
    eq c66 = (T1 <= T2 + float) /\ (T2 <= T1 + int) .
    eq c67 = (T1 <= T2 + float) /\ (T2 <= T3) /\ (T3 <= str) .
    eq c68 = (T1 <= float) /\ (T1 <= T2 + int) .
    eq c69 = (T1 <= float) /\ (T1 <= T2) .
    eq c70 = (T5 <= list < T?0 >) /\ (T5 <= list < T3 >) /\ (T4 <= top) .
    eq c71 = (T4 <= list < T1 + T2 >) /\ (T5 <= list < T3 >) /\ (T4 <= list < T?0 >) /\ (T5 <= list < T?0 >) .
    eq c72 = (T4 <= list < T1 + T2 >) /\ (T4 <= list < T?0 >) .
    eq c73 = (T7 <= str) /\ (T7 <= str + T4) .
    eq c74 = (T7 <= str + float) /\ (T7 <= T1 + T2) .
    eq c75 = (T7 <= T3 + str + float) /\ (T7 <= T1 + T2 + T4) .

endm